#version 330 core

#define MAX_POINTLIGHTS 4

struct Material{
	sampler2D diffuse;
	sampler2D specular;
	sampler2D normal;
	float shininess;
};

struct DirLight{
	vec3 direction;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{
	vec3 position;
	
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float radius;
	float cutoff;
};

in vec2 pass_texCoords;
in vec3 surfaceNormal;
in vec3 fragPos;

out vec4 out_Color;

uniform vec3 viewPos;
uniform Material material;
uniform DirLight dirLight;
uniform PointLight pointLights[MAX_POINTLIGHTS];

// Function prototypes
vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main(){
	
	// Properties
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 viewDir = normalize(viewPos - fragPos);
	// Directional lighting
	vec3 result = calcDirLight(dirLight, unitNormal, viewDir);
	// Point lights
	for(int i = 0; i < MAX_POINTLIGHTS; i++){
		result += calcPointLight(pointLights[i], unitNormal, fragPos, viewDir);
	}
	
	out_Color = vec4(result, 1.0);
}

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir){
	
	vec3 lightDir = normalize(-light.direction);
	// Diffuse shading
	float diffuse = max(dot(normal, lightDir), 0.0);
	// Specular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	float specular = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	// Combine results
	vec3 ambientResult = light.ambient * vec3(texture(material.diffuse, pass_texCoords));
	vec3 diffuseResult = light.diffuse * diffuse * vec3(texture(material.diffuse, pass_texCoords));
	vec3 specularResult = light.specular * specular * vec3(texture(material.specular, pass_texCoords));
	
	return (ambientResult + diffuseResult + specularResult);
}

vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir){
	
	vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diffuse = max(dot(normal, lightDir), 0.0);
    float distance = length(light.position - fragPos);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float specular = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Attenuation
    float d = max(distance - light.radius, 0);
    float denom = d/light.radius + 1;
 	float attenuation = 1 / (denom*denom);
    // scale and bias attenuation such that:
    //   attenuation == 0 at extent of max influence
    //   attenuation == 1 when d == 0
    attenuation = (attenuation - light.cutoff) / (1 - light.cutoff);
    attenuation = max(attenuation, 0);
    
    // Combine results
    vec3 ambientResult = light.ambient * vec3(texture(material.diffuse, pass_texCoords));
	vec3 diffuseResult = light.diffuse * diffuse * vec3(texture(material.diffuse, pass_texCoords));
	vec3 specularResult = light.specular * specular * vec3(texture(material.specular, pass_texCoords));
    ambientResult *= attenuation;
    diffuseResult *= attenuation;
  	specularResult *= attenuation;
   
	return (ambientResult + diffuseResult + specularResult);
}